#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DAL_BLL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="QL_Music")]
	public partial class QLMusicDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertPlayList(PlayList instance);
    partial void UpdatePlayList(PlayList instance);
    partial void DeletePlayList(PlayList instance);
    partial void InsertBaiHat(BaiHat instance);
    partial void UpdateBaiHat(BaiHat instance);
    partial void DeleteBaiHat(BaiHat instance);
    partial void InsertCaSi(CaSi instance);
    partial void UpdateCaSi(CaSi instance);
    partial void DeleteCaSi(CaSi instance);
    #endregion
		
		public QLMusicDataContext() : 
				base(global::DAL_BLL.Properties.Settings.Default.QL_MusicConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public QLMusicDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QLMusicDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QLMusicDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QLMusicDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<PlayList> PlayLists
		{
			get
			{
				return this.GetTable<PlayList>();
			}
		}
		
		public System.Data.Linq.Table<BaiHat> BaiHats
		{
			get
			{
				return this.GetTable<BaiHat>();
			}
		}
		
		public System.Data.Linq.Table<CaSi> CaSis
		{
			get
			{
				return this.GetTable<CaSi>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PlayList")]
	public partial class PlayList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _maPlayList;
		
		private string _tenPlayList;
		
		private EntitySet<BaiHat> _BaiHats;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmaPlayListChanging(string value);
    partial void OnmaPlayListChanged();
    partial void OntenPlayListChanging(string value);
    partial void OntenPlayListChanged();
    #endregion
		
		public PlayList()
		{
			this._BaiHats = new EntitySet<BaiHat>(new Action<BaiHat>(this.attach_BaiHats), new Action<BaiHat>(this.detach_BaiHats));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_maPlayList", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string maPlayList
		{
			get
			{
				return this._maPlayList;
			}
			set
			{
				if ((this._maPlayList != value))
				{
					this.OnmaPlayListChanging(value);
					this.SendPropertyChanging();
					this._maPlayList = value;
					this.SendPropertyChanged("maPlayList");
					this.OnmaPlayListChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tenPlayList", DbType="NVarChar(50)")]
		public string tenPlayList
		{
			get
			{
				return this._tenPlayList;
			}
			set
			{
				if ((this._tenPlayList != value))
				{
					this.OntenPlayListChanging(value);
					this.SendPropertyChanging();
					this._tenPlayList = value;
					this.SendPropertyChanged("tenPlayList");
					this.OntenPlayListChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayList_BaiHat", Storage="_BaiHats", ThisKey="maPlayList", OtherKey="maPlayList")]
		public EntitySet<BaiHat> BaiHats
		{
			get
			{
				return this._BaiHats;
			}
			set
			{
				this._BaiHats.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BaiHats(BaiHat entity)
		{
			this.SendPropertyChanging();
			entity.PlayList = this;
		}
		
		private void detach_BaiHats(BaiHat entity)
		{
			this.SendPropertyChanging();
			entity.PlayList = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BaiHat")]
	public partial class BaiHat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _maBaiHat;
		
		private string _tenBaiHat;
		
		private string _maCaSi;
		
		private string _pathBaiHat;
		
		private string _maPlayList;
		
		private EntityRef<PlayList> _PlayList;
		
		private EntityRef<CaSi> _CaSi;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmaBaiHatChanging(string value);
    partial void OnmaBaiHatChanged();
    partial void OntenBaiHatChanging(string value);
    partial void OntenBaiHatChanged();
    partial void OnmaCaSiChanging(string value);
    partial void OnmaCaSiChanged();
    partial void OnpathBaiHatChanging(string value);
    partial void OnpathBaiHatChanged();
    partial void OnmaPlayListChanging(string value);
    partial void OnmaPlayListChanged();
    #endregion
		
		public BaiHat()
		{
			this._PlayList = default(EntityRef<PlayList>);
			this._CaSi = default(EntityRef<CaSi>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_maBaiHat", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string maBaiHat
		{
			get
			{
				return this._maBaiHat;
			}
			set
			{
				if ((this._maBaiHat != value))
				{
					this.OnmaBaiHatChanging(value);
					this.SendPropertyChanging();
					this._maBaiHat = value;
					this.SendPropertyChanged("maBaiHat");
					this.OnmaBaiHatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tenBaiHat", DbType="NVarChar(50)")]
		public string tenBaiHat
		{
			get
			{
				return this._tenBaiHat;
			}
			set
			{
				if ((this._tenBaiHat != value))
				{
					this.OntenBaiHatChanging(value);
					this.SendPropertyChanging();
					this._tenBaiHat = value;
					this.SendPropertyChanged("tenBaiHat");
					this.OntenBaiHatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_maCaSi", DbType="NChar(10)")]
		public string maCaSi
		{
			get
			{
				return this._maCaSi;
			}
			set
			{
				if ((this._maCaSi != value))
				{
					if (this._CaSi.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmaCaSiChanging(value);
					this.SendPropertyChanging();
					this._maCaSi = value;
					this.SendPropertyChanged("maCaSi");
					this.OnmaCaSiChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pathBaiHat", DbType="NChar(100)")]
		public string pathBaiHat
		{
			get
			{
				return this._pathBaiHat;
			}
			set
			{
				if ((this._pathBaiHat != value))
				{
					this.OnpathBaiHatChanging(value);
					this.SendPropertyChanging();
					this._pathBaiHat = value;
					this.SendPropertyChanged("pathBaiHat");
					this.OnpathBaiHatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_maPlayList", DbType="NChar(10)")]
		public string maPlayList
		{
			get
			{
				return this._maPlayList;
			}
			set
			{
				if ((this._maPlayList != value))
				{
					if (this._PlayList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmaPlayListChanging(value);
					this.SendPropertyChanging();
					this._maPlayList = value;
					this.SendPropertyChanged("maPlayList");
					this.OnmaPlayListChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayList_BaiHat", Storage="_PlayList", ThisKey="maPlayList", OtherKey="maPlayList", IsForeignKey=true)]
		public PlayList PlayList
		{
			get
			{
				return this._PlayList.Entity;
			}
			set
			{
				PlayList previousValue = this._PlayList.Entity;
				if (((previousValue != value) 
							|| (this._PlayList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlayList.Entity = null;
						previousValue.BaiHats.Remove(this);
					}
					this._PlayList.Entity = value;
					if ((value != null))
					{
						value.BaiHats.Add(this);
						this._maPlayList = value.maPlayList;
					}
					else
					{
						this._maPlayList = default(string);
					}
					this.SendPropertyChanged("PlayList");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CaSi_BaiHat", Storage="_CaSi", ThisKey="maCaSi", OtherKey="maCaSi", IsForeignKey=true)]
		public CaSi CaSi
		{
			get
			{
				return this._CaSi.Entity;
			}
			set
			{
				CaSi previousValue = this._CaSi.Entity;
				if (((previousValue != value) 
							|| (this._CaSi.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CaSi.Entity = null;
						previousValue.BaiHats.Remove(this);
					}
					this._CaSi.Entity = value;
					if ((value != null))
					{
						value.BaiHats.Add(this);
						this._maCaSi = value.maCaSi;
					}
					else
					{
						this._maCaSi = default(string);
					}
					this.SendPropertyChanged("CaSi");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CaSi")]
	public partial class CaSi : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _maCaSi;
		
		private string _tenCaSi;
		
		private string _gioiTinh;
		
		private EntitySet<BaiHat> _BaiHats;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmaCaSiChanging(string value);
    partial void OnmaCaSiChanged();
    partial void OntenCaSiChanging(string value);
    partial void OntenCaSiChanged();
    partial void OngioiTinhChanging(string value);
    partial void OngioiTinhChanged();
    #endregion
		
		public CaSi()
		{
			this._BaiHats = new EntitySet<BaiHat>(new Action<BaiHat>(this.attach_BaiHats), new Action<BaiHat>(this.detach_BaiHats));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_maCaSi", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string maCaSi
		{
			get
			{
				return this._maCaSi;
			}
			set
			{
				if ((this._maCaSi != value))
				{
					this.OnmaCaSiChanging(value);
					this.SendPropertyChanging();
					this._maCaSi = value;
					this.SendPropertyChanged("maCaSi");
					this.OnmaCaSiChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tenCaSi", DbType="NVarChar(50)")]
		public string tenCaSi
		{
			get
			{
				return this._tenCaSi;
			}
			set
			{
				if ((this._tenCaSi != value))
				{
					this.OntenCaSiChanging(value);
					this.SendPropertyChanging();
					this._tenCaSi = value;
					this.SendPropertyChanged("tenCaSi");
					this.OntenCaSiChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gioiTinh", DbType="NVarChar(10)")]
		public string gioiTinh
		{
			get
			{
				return this._gioiTinh;
			}
			set
			{
				if ((this._gioiTinh != value))
				{
					this.OngioiTinhChanging(value);
					this.SendPropertyChanging();
					this._gioiTinh = value;
					this.SendPropertyChanged("gioiTinh");
					this.OngioiTinhChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CaSi_BaiHat", Storage="_BaiHats", ThisKey="maCaSi", OtherKey="maCaSi")]
		public EntitySet<BaiHat> BaiHats
		{
			get
			{
				return this._BaiHats;
			}
			set
			{
				this._BaiHats.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BaiHats(BaiHat entity)
		{
			this.SendPropertyChanging();
			entity.CaSi = this;
		}
		
		private void detach_BaiHats(BaiHat entity)
		{
			this.SendPropertyChanging();
			entity.CaSi = null;
		}
	}
}
#pragma warning restore 1591
